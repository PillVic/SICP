#lang sicp

(define square (lambda (x)
                 (* x x)))

(define (smallest-divisor n)
  (find-divisor n 2))

(define (find-divisor n test-divisor)
  (cond ((> (square test-divisor) n) n)
        ((divides? test-divisor n) test-divisor)
        (else (find-divisor n (+ test-divisor 1)))))

(define (divides? a b)
  (= (remainder b a) 0))

(define (prime? n)
  (= n (smallest-divisor n)))

;;;;over is given in the previous text
(define (timed-prime-test n)
  (newline)
  (display n)
  (start-prime-test n (runtime)))

(define (start-prime-test n start-time)
  (if (fast-prime? n 1)
      (report-prime (- (runtime start-time)))))

(define (report-prime elapsed-time)
  (display "***")
  (display elapsed-time))
;;over is the condition on the problem

(define (sfp start count)
  (define (fix a)
    (if (= (remainder a 2) 0)
        (+ a 1)))
  (define (sfp-iter a count)
    (cond ((> count 0)
           (let ((t (runtime)))
           (cond ((prime? a)
                  (display a) (display ":") (display (- (runtime) t))
                  (newline)
                  (sfp-iter (+ a 2) (- count 1)))
                 (else (sfp-iter (+ a 2) count)))))))
               
  (sfp-iter (fix start) count))
;;;;;;;;;;;;;;;;;;;;;
(define even? (lambda (x) (= (remainder x 2) 2)))
(define (expmod base exp m)
  (cond ((= exp 0) 1)
        ((even? exp)
         (remainder (square (expmod base (/ exp 2) m))
                    m))
        (else
         (remainder (* base (expmod base (- exp 1) m))
                    m))))
(define (fermat-test n)
  (define (try-it a)
    (= (expmod a n n) a))
  (try-it (+ 1 (random (- n 1)))))

(define (fast-prime? n times)
  (cond ((= times 0) (fast-prime? n (- times 1)))
        ((fermat-test n) (fast-prime? n (- times 1)))
        (else false)))

         