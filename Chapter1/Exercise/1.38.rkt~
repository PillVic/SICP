#lang sicp

;;;;;iteration style
(define (cont-frac-iter n d k)
  (define (iter step result)
    (if (> step k)
        result
        (iter (+ step 1) (/ (n k) (+ (d k) result)))))
  (iter 1 (/ (n k) (d k))))
;;;;;;;;recursive style
(define (cont-frac-recur n d k)
  (if (= k 1)
      (/ (n k) (d k))
      (/ (n k) (+ (d k) (cont-frac-recur n d (- k 1))))))

;;;;;;;;;;

(define (d k)
  (if (= (remainder k 3) 2)
      (/ (+ k k 2) 3)
      1))

(cont-frac-recur (lambda (i) 1.0)
                (lambda (i) 1.0)
                ;d
                100)


           